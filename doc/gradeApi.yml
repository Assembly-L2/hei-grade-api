openapi: 3.0.1
info:
  title: HEI Report card API
  description: 'this is the HEI Report card API implementation'
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEI-Franklin/hei_Grade_API/1.0.0
  - url: http://localhost:8080
    description: Generated server url
paths:
  /students/{student_id}/repord_card/{semester_id}:
    get:
      tags:
        - Report Card
      summary: get student report card by student and semester id
      operationId: getStudentRepordCardBySemester
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
        - name: semester_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getRepordCard'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []

  /students/{student_id}/final_repord_card:
    get:
      tags:
        - Report Card
      summary: get student final report card by student and semester id
      operationId: getStudentFinalRepordCardBySemester
      parameters:
        - name: student_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getsemesterDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []

  /semesters:
    post:
      tags:
        - Semester
      summary: create new semester
      operationId: createSemester
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createsemesterDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getsemesterDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    get:
      tags:
        - Semester
      summary: get all semesters
      operationId: getAllSemesters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getsemesterDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /semesters/{semester_id}:
    get:
      tags:
        - Semester
      summary: Get semester by id
      operationId: getSemesterById
      parameters:
        - name: semester_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getsemesterDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    put:
      tags:
        - Semester
      summary: Update semester By Id
      description: 'you can update name start_date end_date status'
      operationId: UpdateSemesterById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createsemesterDTO'
        required: true
      parameters:
        - name: semester_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getsemesterDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Semester
      operationId: delete semester by Id
      summary: delete one semester by id
      parameters:
        - name: semester_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /evaluations:
    post:
      tags:
        - Evaluation
      summary: create new evaluation
      operationId: createEvaluation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEvaluationDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEvaluationDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    get:
      tags:
        - Evaluation
      summary: get all evaluations
      operationId: getAllEvaluation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getEvaluationDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /evaluations/{evaluation_id}:
    get:
      tags:
        - Evaluation
      summary: get evaluation by id
      operationId: getEvaluationbyId
      parameters:
        - name: evaluation_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEvaluationDTO'
    put:
      tags:
        - Evaluation
      summary: Update evaluation by Id
      operationId: updateEvaluationById
      parameters:
        - name: evaluation_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEvaluationDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEvaluationDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    delete:
      tags:
        - Evaluation
      summary: delete evaluation by id
      operationId: deleteEvaluationByid
      parameters:
        - name: evaluation_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /courses:
    post:
      tags:
        - Course
      summary: create new course
      operationId: createCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCourseDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCourseDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    get:
      tags:
        - Course
      summary: get all course
      operationId: getAllCourse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getCourseDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /courses/{course_id}:
    get:
      tags:
        - Course
      summary: get course by id
      operationId: getCoursebyId
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCourseDTO'
    put:
      tags:
        - Course
      summary: Update course by Id
      operationId: updateCourseById
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCourseDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCourseDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    delete:
      tags:
        - Course
      summary: delete course by id
      operationId: deleteCourseByid
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /grades:
    post:
      tags:
        - Grade
      summary: create new grade
      operationId: createGrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createGradeDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGradeDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    get:
      tags:
        - Grade
      summary: get all grade
      operationId: getAllGrade
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getGradeDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /grades/{grade_id}:
    get:
      tags:
        - Grade
      summary: get grade by id
      operationId: getGradebyId
      parameters:
        - name: grade_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGradeDTO'
    put:
      tags:
        - Grade
      summary: Update grade by Id
      operationId: updateGradeById
      parameters:
        - name: grade_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createGradeDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGradeDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    delete:
      tags:
        - Grade
      summary: delete grade by id
      operationId: deleteGradeByid
      parameters:
        - name: grade_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
        
  /groups:
    post:
      tags:
        - Group
      summary: create new group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createGroupDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroupDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    get:
      tags:
        - Group
      summary: get all groups
      operationId: getAllGroups
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getGroupDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /groups/{group_id}:
    get:
      tags:
        - Group
      summary: get group by id
      operationId: getGroupbyId
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroupDTO'
    put:
      tags:
        - Group
      summary: Update group by Id
      operationId: updateGroupById
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createGroupDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroupDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    delete:
      tags:
        - Group
      summary: delete group by id
      operationId: deleteGroupByid
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []

  /mentions:
    post:
      tags:
        - Mention
      summary: create new mention
      operationId: createMention
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMentionDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMentionDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    get:
      tags:
        - Mention
      summary: get all mentions
      operationId: getAllMentions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getMentionDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /mentions/{mention_id}:
    get:
      tags:
        - Mention
      summary: get mention by id
      operationId: getMentionbyId
      parameters:
        - name: mention_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMentionDTO'
    put:
      tags:
        - Mention
      summary: Update mention by Id
      operationId: updateMentionById
      parameters:
        - name: mention_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMentionDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMentionDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    delete:
      tags:
        - Mention
      summary: delete grade by id
      operationId: deleteMentionByid
      parameters:
        - name: grade_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []

  /users:
    post:
      tags:
        - User
      summary: create new user
      operationId: createGUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    get:
      tags:
        - User
      summary: get all users
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/getUserDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
  /users/{user_id}:
    get:
      tags:
        - User
      summary: get user by id
      operationId: getUserbyId
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserDTO'
    put:
      tags:
        - User
      summary: Update user by Id
      operationId: updateUserById
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getGroupDTO'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []
    delete:
      tags:
        - User
      summary: delete user by id
      operationId: deleteUserByid
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      security:
        - api: []

components:
  schemas:
    createsemesterDTO:
      type: object
      properties:
        name:
          type: string
        start_date:
          type: string
        end_date:
          type: string
        status:
          type: boolean

    getsemesterDTO:
      allOf:
        - $ref : '#/components/schemas/createsemesterDTO'
      properties:
        id:
          type: integer

    createEvaluationDTO:
      type: object
      properties:
        date_exam:
          type: string
        status:
          type: boolean
        semester_id:
          type: integer
        course_id:
          type: integer

    getEvaluationDTO:
      allOf:
        - $ref : '#/components/schemas/createEvaluationDTO'
      properties:
        id:
          type: integer

    createCourseDTO:
      type: object
      properties:
        name:
          type: string

    getCourseDTO:
      allOf:
        - $ref : '#/components/schemas/createCourseDTO'
      properties:
        id:
          type: integer

    createGradeDTO:
      type: object
      properties:
        mark:
          type: integer
        user_id:
          type: integer
        id_evaluation:
          type: integer

    getGradeDTO:
      allOf:
        - $ref : '#/components/schemas/createGradeDTO'
      properties:
        id:
          type: integer

    getRepordCard:
      type: object
      properties:
        id:
          type: string
        question:
          type: string
        type:
          type: string
          enum:
            - PARAGRAPH
            - CHECKBOXES
            - MULTIPLE_CHOICE
        choice:
          type: array
          items:
            type: string
        formuuid:
          type: string
        answerNumber:
          type: integer
          format: int32

    createGroupDTO:
      type: object
      properties:
        name:
          type: string
        level:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        status:
          type: boolean

    getGroupDTO:
      allOf:
        - $ref : '#/components/schemas/createGroupDTO'
      properties:
        id:
          type: integer

    createMentionDTO:
      type: object
      properties:
        name:
          type: string
        start_note:
          type: string
        end_note:
          type: string

    getMentionDTO:
      allOf:
        - $ref: '#/components/schemas/createMentionDTO'
      properties:
        id:
          type: integer
      
    createUserDTO:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        sex:
          type: string
        birth_date:
          type: string
          format: date
        address: 
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        entrance_date_time:
          type: string
          format: date
        status:
          type: string

    getUserDTO:
      allOf:
        - $ref: '#/components/schemas/createUserDTO'
      properties:
        id:
          type: integer

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  securitySchemes:
    api:
      type: http
      scheme: bearer
